/* tslint:disable */
/* eslint-disable */
/**
 * PortalApi | v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @enum {string}
 */

export const MemberStatusModel = {
    NonMember: 'NonMember',
    PendingApproval: 'PendingApproval',
    Denied: 'Denied',
    Regular: 'Regular',
    Associate: 'Associate',
    Life: 'Life',
    Former: 'Former'
} as const;

export type MemberStatusModel = typeof MemberStatusModel[keyof typeof MemberStatusModel];


/**
 * 
 * @export
 * @enum {string}
 */

export const NullableOfMemberStatusModel = {
    NonMember: 'NonMember',
    PendingApproval: 'PendingApproval',
    Denied: 'Denied',
    Regular: 'Regular',
    Associate: 'Associate',
    Life: 'Life',
    Former: 'Former'
} as const;

export type NullableOfMemberStatusModel = typeof NullableOfMemberStatusModel[keyof typeof NullableOfMemberStatusModel];


/**
 * 
 * @export
 * @interface ProblemDetails
 */
export interface ProblemDetails {
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'type'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'title'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProblemDetails
     */
    'status'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'detail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'instance'?: string | null;
}
/**
 * 
 * @export
 * @interface Request
 */
export interface Request {
    /**
     * 
     * @type {string}
     * @memberof Request
     */
    'firstName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Request
     */
    'lastName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Request
     */
    'emailAddress'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Request
     */
    'homePhone'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Request
     */
    'mobilePhone'?: string | null;
    /**
     * 
     * @type {NullableOfMemberStatusModel}
     * @memberof Request
     */
    'membershipStatus'?: NullableOfMemberStatusModel | null;
    /**
     * 
     * @type {string}
     * @memberof Request
     */
    'membershipStartDate'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Request
     */
    'membershipEndDate'?: string | null;
}


/**
 * 
 * @export
 * @interface Response
 */
export interface Response {
    /**
     * 
     * @type {UserModel}
     * @memberof Response
     */
    'user': UserModel;
}
/**
 * 
 * @export
 * @interface Response2
 */
export interface Response2 {
    /**
     * 
     * @type {Array<UserModel>}
     * @memberof Response2
     */
    'users': Array<UserModel>;
}
/**
 * 
 * @export
 * @interface UserModel
 */
export interface UserModel {
    /**
     * 
     * @type {string}
     * @memberof UserModel
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof UserModel
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof UserModel
     */
    'lastName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserModel
     */
    'emailAddress': string;
    /**
     * 
     * @type {string}
     * @memberof UserModel
     */
    'homePhone'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserModel
     */
    'mobilePhone'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserModel
     */
    'photoUrl'?: string | null;
    /**
     * 
     * @type {MemberStatusModel}
     * @memberof UserModel
     */
    'membershipStatus': MemberStatusModel;
    /**
     * 
     * @type {string}
     * @memberof UserModel
     */
    'membershipStartDate'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserModel
     */
    'membershipEndDate'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof UserModel
     */
    'roles': Array<string>;
}



/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {Request} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersIdPatch: async (id: string, request: Request, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1UsersIdPatch', 'id', id)
            // verify required parameter 'request' is not null or undefined
            assertParamExists('v1UsersIdPatch', 'request', request)
            const localVarPath = `/v1/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersSignInPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/users/sign-in`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.v1UsersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {Request} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersIdPatch(id: string, request: Request, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersIdPatch(id, request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.v1UsersIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersSignInPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersSignInPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.v1UsersSignInPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersGet(options?: RawAxiosRequestConfig): AxiosPromise<Response2> {
            return localVarFp.v1UsersGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {Request} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersIdPatch(id: string, request: Request, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1UsersIdPatch(id, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersSignInPost(options?: RawAxiosRequestConfig): AxiosPromise<Response> {
            return localVarFp.v1UsersSignInPost(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public v1UsersGet(options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).v1UsersGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {Request} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public v1UsersIdPatch(id: string, request: Request, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).v1UsersIdPatch(id, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public v1UsersSignInPost(options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).v1UsersSignInPost(options).then((request) => request(this.axios, this.basePath));
    }
}



